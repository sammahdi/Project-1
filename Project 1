# The idea behind this project is to take a number of specific files, apply a number of modifications to them
# fit the modified data to a least squared fit (want global fit, not local), calculate goodness of fit and standard deviation
# This is supposed to be general use, and as user friendly as possible. And to show off, design it so you can tell the user how long your program took to run
# The user should be able to input as many files as they want (a minimum of 2, no max). 
# The Data Height is the values you care about, you will notice that the value of Data Height at each index decreases. 
# The idea is to fit that to an exponential decay curve.
# Before doing that though, the data needs to be modified first. First, it needs to be normalized to a set of data 
#Normalization data
# 1.03E+05	1.03E+05	9.50E+04	7.96E+04	7.81E+04	74562
#These values will vary user to user, so you'd want the user to input these values themselves. 
# Each column of the normalization data goes with each input file. I.E. 1.03e5 normalizes all the values in file 1. 74562 normalizes 
#all the values in file 6. Note: Due to this, all columns of normalization values must fit the number of files (you may wish to implement
#an error option here if the dimensions don't match up)
# Once this is done, the data need to be modified again via a specific equation
#(Values from File 1)-(Value from File #)/(((Values from File 1)-(Value from File #))+(Value from File #))
# I.E. The normalized data height from the first file, subtracted by the normalized data height from every other file (e.g. values from file 1 should all be zero after this). 
# Again, these are all sorted from index. So as an example of what one of your final data sets should look like after everything:
# 0	0	0.414376975	0.560696661	0.800540624	1
# The above is the output you should be getting for index 1. Each value is from one file. 
# Finally, you need to fit the above curve using least squares fit to this equation (kD is what you are determining). 
# (prot + lig + kd) - sqrt(((prot + lig + kd)**2) - 4*prot*lig))/(2*prot)
# The values for prot and lig also come from the user, since they vary user to user. 
#Prot/Lig values (Prot is column 1, Lig is column 2)
#0.596421471	0.06
#0.5859375 	0.119284294
#0.566037736	0.29296875
#0.530035336	0.622641509
#0.418994413	1.219081272
#0.388619855	3.058659218
# Finally, you'd also like to demonstrate how well your global fit matches up with your data, so you plot the fit to the data
# Make sure you show all your data points, and the legend differentiates each one by color and index
# You also want to show goodness of it (R2), and standard deviation of your kD
# You want to save the graph, with axes labeled and legend showing, and create an output that has the kD, standard deviation, and goodness of fit
# You also want to save the raw output of the fit, in case someone wishes to graph using excel or their own program (matplotlib sucks)
# I have attached an example of the graph and text output file below below
#Output
#kD 	 Stand Deviaton R2
#0.33427323 0.03546924     0.9447287395475099
#https://imgur.com/EY8ow8k
